[{"edge: {{ css('path') }}":{"prefix":"css","body":"{{ css('$1') }}","description":"Adonis - make css link"},"edge: {{ script ('path') }}":{"prefix":"script","body":"{{ script('$1') }}","description":"Adonis - make script link"},"edge: {{ assetsUrl('path') }}":{"prefix":"assetsUrl","body":"{{ assetsUrl('$1') }}","description":"Adonis - make asset link"},"edge: {{ route('name', params = {}) }}":{"prefix":"route","body":"{{ route('$1', { $2 }) }}","description":"Adonis - make link from route"},"edge: {{ url }}":{"prefix":"url","body":"{{ url }}","description":"Adonis - current url"},"edge: {{ auth.user }}":{"prefix":"auth-user","body":"{{ auth.user$1 }}$0","description":"Adonis - current auth user"},"edge: {{ csrfField() }}":{"prefix":"csrf","body":"{{ csrfField() }}","description":"Adonis - csrf field"},"edge: {{ cspMeta() }}":{"prefix":"cspMeta","body":"{{ cspMeta() }}","description":"Adonis - meta tag"},"edge: @loggedIn ... @else ... @endLoggedIn":{"prefix":"logged-in","body":["@loggedIn","  $1","@else","  $2","@endloggedIn"],"description":"Edge - @loggedIn else block"},"edge: {{ old(key, default) }}":{"prefix":"old","body":"{{ old($1, $2) }}","description":"Edge View - returns the value for a given key from the flash store"},"edge: {{ hasErrorFor(key) }}":{"prefix":"has-error-for","body":"{{ hasErrorFor($1) }}","description":"Edge View - returns true if there is an error for a given field inside the flash store"},"edge: {{ getErrorFor(key) }}":{"prefix":"get-error-for","body":"{{ getErrorFor($1) }}","description":"Edge View - returns the error message for a given field"},"edge: {{ flashMessage(key, default) }}":{"prefix":"flash","body":"{{ flashMessage(${1:key}, ${2:default}) }}","description":"Edge View - returns the error message for a given field"},"edge: {{ auth }}":{"prefix":"auth","body":"{{ auth$1 }}","description":"Edge View - authenticated object"},"edge: {{ antl }}":{"prefix":"antl","body":"{{ antl.${1|formatNumber,formatRelative,formatDate,formatAmount,formatMessage|}($3) }}","description":"Edge Localizalisation - antl"}},{"edge: comment":{"prefix":"comment","body":["{{-- ${1:comment} --}}","$2"],"description":"Edge: Comment block"},"edge: multiline comment":{"prefix":"comment-multiline","body":["{{-- ","  ${1:comment}","--}}","$2"],"description":"Edge: Multiline comment block"},"html: comment":{"prefix":"html-comment","body":["<!-- ${1:comment} -->","$2"],"description":"HTML: Comment block"}},{"edge: @include('view')":{"prefix":"include","body":"@include('${1:name}')$2","description":"Edge: Include view"},"edge: @super":{"prefix":"super","body":"@super","description":"Edge: Super extend"},"edge: @!component('name')":{"prefix":"component","body":"@!component('$1')","description":"Edge: Component self close"},"edge: @component('name') ... @endcomponent":{"prefix":"component-block","body":["@component('$1')","  $2","@endcomponent"],"description":"Edge: Component block"}},{"edge: @if (...)":{"prefix":"if","body":["@if($1)","  $2","@endif"],"description":"Edge: if block"},"edge: @if (...) ... @else ... @endif":{"prefix":"ifelse","body":["@if($1)","  $2","@else","  $3","@endif"],"description":"Edge: if-else block"},"edge: @if (...) ... @elseif (...) ... @else ... @endif":{"prefix":"ifelseif","body":["@if($1)","  $2","@elseif($3)","  $4","@else","  $5","@endif"],"description":"Edge: if-else block"},"edge: @unless (...) ... @else ... @endunless":{"prefix":"unless","body":["@unless($1)","  $2","@else","  $3","@endunless"],"description":"Edge: unless-block"}},{"edge: @debugger":{"prefix":"debugger","body":["@debugger","$0"],"description":"Edge: Debug block"}},{"edge: {{ text }}":{"prefix":"echo","body":"{{ ${1:data} }}$2","description":"Edge: Echo data"},"edge: {{{ text }}}":{"prefix":"echo-html","body":"{{{ ${1:html_data} }}}$2","description":"Edge: Echo unescaped data (allow html outputs)"},"edge: @{{ text }}":{"prefix":"echo-raw","body":"@{{ ${1:variable} }}$2","description":"Edge: Echo untouched data (allow javascript expression)"}},{"edge: range(from, to)":{"prefix":"range","body":"{{ range($1, $2) }}","description":"Edge: Returns an array of numbers within a given range"},"edge: batch(array)":{"prefix":"batch","body":"{{ batch([ $1 ]) }}","description":"Edge: Convert an array to a batch of nested arrays."},"edge: toJSON(object)":{"prefix":"toJSON","body":"{{ toJSON({ $1 }) }}","description":"Edge: Convert an object to a JSON string via JSON.stringify."},"edge: first(array)":{"prefix":"first","body":"{{ first([ $1 ]) }}","description":"Edge: Returns the first item from an array."},"edge: last(array)":{"prefix":"last","body":"{{ last([ $1 ]) }}","description":"Edge: Returns the last item from an array."},"edge: groupBy(array)":{"prefix":"groupBy","body":"{{ groupBy([ $1 ], '$2') }}","description":"Edge: Group an array via given field. For example group all articles for an author."},"edge: size(array)":{"prefix":"size","body":"{{ size($1) }}","description":"Edge: Return size of a string or an array."},"edge: el(...)":{"prefix":"el","body":"{{ el($1) }}","description":"Edge: Returns an HTML string by replacing dynamic placeholders with actual content. It is helpful inside if shorthand."},"edge: camelCase(text)":{"prefix":"camelCase","body":"{{ camelCase('$1') }}","description":"Edge: Convert string to camelcase."},"edge: upperCase(text)":{"prefix":"upperCase","body":"{{ upperCase('$1') }}","description":"Edge: Convert string to uppercase."},"edge: upperFirst(text)":{"prefix":"upperFirst","body":"{{ upperFirst('$1') }}","description":"Edge: Convert first character of a string to uppercase."},"edge: lowerCase(text)":{"prefix":"lowerCase","body":"{{ lowerCase('$1') }}","description":"Edge: Convert string to lowerCase."},"edge: lowerFirst(text)":{"prefix":"lowerFirst","body":"{{ lowerFirst('$1') }}","description":"Edge: Convert first character of a string to lowercase."},"edge: capitalize(text)":{"prefix":"capitalize","body":"{{ capitalize('$1') }}","description":"Edge: Convert first character of all words inside a string to uppercase."},"edge: truncate (text1, limit, ...)":{"prefix":"truncate","body":"{{ truncate('$1', $2, '...') }}","description":"Edge: Truncate a string to a given limit"},"edge: toAnchor(url, title = url)":{"prefix":"toAnchor","body":"{{ toAnchor('$1', '$2') }}","description":"Edge: Convert a url to an anchor tag"},"edge: urlEncode(string)":{"prefix":"urlEncode","body":"{{ urlEncode('$1') }}","description":"Edge: Encode a string to be url safe."}},{"edge: @each(item as collection) ... @endeach":{"prefix":"each-array","body":["@each(${1:item} as ${2:collection})","  $3","@endeach"],"description":"Edge: @each array block"},"edge: @each( (key, value) in object) ... @endeach":{"prefix":"each-object","body":["@each(${1:key}, ${2:value} in ${3:object})","  $3","@endeach"],"description":"Edge: @each array block"},"edge: @each (item in collection) ... @endeach":{"prefix":"each-in","body":["@each(${1:item} in ${2:collection})","  $3","@endeach"],"description":"Edge: @each else block"},"edge: @each(item in collection) ... @else ... @endeach":{"prefix":"each-else","body":["@each(${1:item} in ${2:collection})","  $3","@else","  $4","@endeach"],"description":"Edge: @each else block"},"edge: $loop.index":{"prefix":"loop-index","body":"\\$loop.${1:index}$2","description":"Edge: Holds the iteration index, start from 0"},"edge: $loop.total":{"prefix":"loop-total","body":"\\$loop.${1:total}$2","description":"Edge: The total number of items"},"edge: @if($loop.first) ... @endif":{"prefix":"loop-first","body":["@if(\\$loop.first)","  ${1:{{-- This is the first iteration --\\}\\}}","@endif","$2"],"description":"Edge: Whether or not the item is the first in the loop"},"edge: @if($loop.last) ... @endif":{"prefix":"loop-last","body":["@if(\\$loop.last)","  ${1:{{-- This is the last iteration --\\}\\}}","@endif","$2"],"description":"Edge: Whether or not the item is the last in the loop"},"edge: @if(loop.isEven) ... @endif":{"prefix":"loop-isEven","body":["@if(\\$loop.isEven)","  ${1:{{-- This is the isEven code --\\}\\}}","@endif","$2"],"description":"Edge: Whether or not an iteration count is an even number"},"edge: @if($loop.isOdd) ... @endif":{"prefix":"loop-isOdd","body":["@if(\\$loop.isOdd)","  ${1:{{-- This is the isOdd code --\\}\\}}","@endif","$2"],"description":"Edge: Whether or not an iteration count is an odd number. The first item returns true for isOdd"}},{"edge: @layout('view')":{"prefix":"layout","body":"@layout('${1:name}')","description":"Edge: Layout view"},"edge: @extend('layout')":{"prefix":"extends","body":"@extends('${1:name}')$2","description":"Edge: Extends view layout"},"edge: @section('block') ... @endsection":{"prefix":"section-block","body":["@section('${1:name}')","  $2","@endsection"],"description":"Edge: Section block"},"edge: @!section('block')":{"prefix":"section","body":"@!section('${1:name}')","description":"Edge: Section no default"}},{"edge: @!each(item in collection, include = 'partial')":{"prefix":"each-include","body":"@!each(${1:item} in ${2:collection}, include = '${3:partial}')$4","description":"Edge: @each include"}},{"edge: @raw ... @endraw":{"prefix":"raw","body":["@raw","  $1","@endraw"],"description":"Edge: echo untouched data (allow javascript expression)"}},{"edge: @inlineSvg('path')":{"prefix":"inlineSvg","body":"@inlineSvg('${1:name}')$2","description":"Edge: Inline Svg"}},{"edge: @yield('value') ... @endyield":{"prefix":"yield","body":["@yield('$1')","  $2","@endyield"],"description":"Edge: yield slot"}}]