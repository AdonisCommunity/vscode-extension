{
    "websocket:": {
        "body": "${1:Ws}.${2|channel,getChannel|}($3)",
        "description": "Adonis Websocket",
        "prefix": "ws"
    },
    "websocket: channel": {
        "body": [
            "${1:Ws}.channel(${2:name}, ({ ${3:socket} \\}) => {",
            "  ${4:// implementation}",
            "\\})"
        ],
        "description": "Adonis Websocket: Register a dynamic function to a socket channel.",
        "prefix": "ws-channel"
    },
    "websocket: get channel": {
        "body": "${1:Ws}.getChannel(${2:name})$0",
        "description": "Adonis Websocket: Select a given channel to perform an action on.",
        "prefix": "ws-get-channel"
    },
    "websocket: middleware": {
        "body": [
            "${1:Ws}",
            "  .channel(${2:name}, ${3:controller})",
            "  .middleware([${4:middleware},$5])$0"
        ],
        "description": "Adonis Websocket: Register a middleware to a channel.",
        "prefix": "ws-middleware"
    },
    // Socket events
    "socket:": {
        "body": "${1:socket}.${2|on,emit,emitTo,broadcast,broadcastToAllon,emit,close|}($3)",
        "description": "Adonis Websocket (Server API)",
        "prefix": "socket"
    },
    "socket: on": {
        "body": [
            "${1:socket}.on('${2|close,error|}', ${3:() => {",
            "  // implementation",
            "\\}})"
        ],
        "description": "Adonis Websocket (Server API): Subscribe to available socket events (error, close).",
        "prefix": "socket-on"
    },
    "socket: on close": {
        "body": [
            "${1:socket}.on('close', ${2:() => {",
            "  // implementation",
            "\\}})"
        ],
        "description": "Adonis Websocket (Server API): Invoked when a subscription is closed.",
        "prefix": "socket-on-close"
    },
    "socket: on error": {
        "body": [
            "${1:socket}.on('error', ${2:() => {",
            "  // implementation",
            "\\}})"
        ],
        "description": "Adonis Websocket (Server API): Invoked when an error is received.",
        "prefix": "socket-on-error"
    },
    // Socket methods
    "socket: emit": {
        "body": "${1:socket}.emit(${2:event}, ${3:data}, ${4:[ackCallback]})",
        "description": "Adonis Websocket (Server API): Emit event to the connected client.",
        "prefix": "socket-emit"
    },
    "socket: emit to": {
        "body": "${1:socket}.emitTo(${2:event}, ${3:data}, ${4:[socketIds]})",
        "description": "Adonis Websocket (Server API): Emit event to an array of socket ids.",
        "prefix": "socket-emit-to"
    },
    "socket: broadcast": {
        "body": "${1:socket}.broadcast(${2:event}, ${3:data})",
        "description": "Adonis Websocket (Server API): Emit event to everyone except yourself.",
        "prefix": "socket-broadcast"
    },
    "socket: broadcast to all": {
        "body": "${1:socket}.broadcastToAll(${2:event}, ${3:data})",
        "description": "Adonis Websocket (Server API): Emit event to everyone including yourself.",
        "prefix": "socket-broadcastToAll"
    },
    "socket: close": {
        "body": "${1:socket}.close()",
        "description": "Adonis Websocket (Server API): Forcefully close a subscription from the server.",
        "prefix": "socket-close"
    },
    // Socket properties
    "socket: properties": {
        "body": "${1:socket}.${2|id,topic,connection|}",
        "description": "Adonis Websocket (Server API) - Read-only socket prorities.",
        "prefix": "socket-props"
    }
}