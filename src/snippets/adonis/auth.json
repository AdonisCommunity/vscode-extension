{
    "auth:": {
        "body": "${1:auth}.${2|attempt,login,loginViaId,remember,check,getUser,logout,generate,withRefreshToken,generateForRefreshToken,newRefreshToken,listTokens,authenticator,revokeTokens,revokeTokensForUser|}($3)",
        "description": "Adonis Authentication",
        "prefix": "auth"
    },
    // Session methods
    "auth:  attempt login via session": {
        "body": "${1:auth}.attempt(${2:uid}, ${3:password})",
        "description": "Adonis Auth: Login via uid and password, throwing an exception if no user is found or the password is invalid:",
        "prefix": "auth-attempt"
    },
    "auth: attempt to login": {
        "body": "${1:auth}.login(${2:user})",
        "description": "Adonis Auth: Login via user model instance, not verify anything but simply marking the user as logged in",
        "prefix": "auth-login"
    },
    "auth: login a user via id": {
        "body": "${1:auth}.loginViaId(${2:id})",
        "description": "Adonis Auth: Login a via user id, querying the database to ensure the user exists",
        "prefix": "auth-via-id"
    },
    "auth: remember user session": {
        "body": "${1:auth}.remember(${2:true}).$5attempt(${3:email}, ${4:password})",
        "description": "Adonis Auth: When calling methods like attempt, login or loginViaId, chain the remember method to ensure users stay logged in after closing their browser",
        "prefix": "auth-remember"
    },
    "auth: check if logged in": {
        "body": "${1:auth}.check()",
        "description": "Adonis Auth: Check if a user is already logged in by reading their session",
        "prefix": "auth-check"
    },
    "auth: get logged in user": {
        "body": "${1:auth}.getUser()",
        "description": "Adonis Auth: Get the logged in user instance (via the check method)",
        "prefix": "auth-get-user"
    },
    "auth: logout user": {
        "body": "${1:auth}.logout()",
        "description": "Adonis Auth: Log out the currently logged in user",
        "prefix": "auth-logout"
    },
    // JWT methods
    "auth: generate jwt token": {
        "body": "${1:auth}.generate(${2:user}, ${3:jwtPayload}, ${4:jwtOptions})",
        "description": "Adonis Auth: Generate JWT token for a given user",
        "prefix": "auth-generate"
    },
    "auth: authenticate and generate refresh token": {
        "body": "${1:auth}.withRefreshToken().$4attempt(${2:uid}, ${3:password})",
        "description": "Adonis Auth: Instruct the JWT authenticator to generate a refresh token as well",
        "prefix": "auth-with-rtoken"
    },
    "auth: generate token from refresh token": {
        "body": "${1:auth}.generateForRefreshToken(${2:refreshToken}, ${3:jwtPayload})",
        "description": "Adonis Auth: Generate a new JWT token using the refresh token. Passing jwtPayload=true encodes the user object within the token.",
        "prefix": "auth-generate-from-rtoken"
    },
    "auth: forcefully generate new token": {
        "body": "${1:auth}.newRefreshToken().$4generateForRefreshToken(${2:refreshToken}, ${3:jwtPayload})",
        "description": "Adonis Auth: When generating a new jwt token, the auth provider does not reissue a new refresh token and instead uses the old one. If you want, you can also regenerate a new refresh token:",
        "prefix": "auth-new-rtoken"
    },
    "auth: get all refresh token for auth user": {
        "body": "${1:auth}.listTokens()",
        "description": "Adonis Auth: List all tokens for the user (either JWT or API)",
        "prefix": "auth-list-tokens"
    },
    "auth: authenticator": {
        "body": "${1:auth}.authenticator(${2:authenticator})",
        "description": "Adonis Auth: authenticator",
        "prefix": "auth-authenticator"
    },
    "auth: revoke API tokens for auth user": {
        "body": "${1:auth}.revokeTokens(${2:tokens = []}, ${3:delete = false})",
        "description": "Adonis Auth: Revoke all authenticated user API tokens by setting a flag in the tokens table",
        "prefix": "auth-revoke-tokens"
    },
    "auth: revoke API tokens for specified user": {
        "body": "${1:auth}.revokeTokensForUser(${2:user}, ${3:tokens}, ${4:delete = false})",
        "description": "Adonis Auth: Revoke all specified user API tokens.",
        "prefix": "auth-revoke-user-tokens"
    }
}