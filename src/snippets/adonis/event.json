{
    "event:": {
        "body": "${1:Event}.${2|on,fire,when,once,onAny,times,emit,removeListener,off,removeAlllisteners,listenersCount,getListeners,hasListeners|}($3)",
        "description": "Adonis Event",
        "prefix": "event"
    },
    "event: on": {
        "body": "${1:Event}.on(${2:event}, ${3:listener})",
        "description": "Adonis Event: Bind single or multiple listeners for a given event. The listener can be a closure function or reference to one (or many) IoC container bindings.",
        "prefix": "event-on"
    },
    "event: fire": {
        "body": "${1:Event}.fire(${2:event}, ${3:data})",
        "description": "Adonis Event: Emit an event with optional data (an alias to the `emit` method).",
        "prefix": "event-fire"
    },
    "event: when": {
        "body": "${1:Event}.when(${2:event}, ${3:listener})",
        "description": "Adonis Event: The when method aliases the on method.",
        "prefix": "event-when"
    },
    "event: once": {
        "body": "${1:Event}.once(${2:event}, ${3:listener})",
        "description": "Adonis Event: Same as on, but only called one time.",
        "prefix": "event-once"
    },
    "event: on any": {
        "body": "${1:Event}.onAny(${2:listener})",
        "description": "Adonis Event: Bind listener for any event.",
        "prefix": "event-on-any"
    },
    "event: times": {
        "body": "${1:Event}.times(${2:times})",
        "description": "Adonis Event: The times method is chained with `on` or `when` to limit the number of times the listener should be fired.",
        "prefix": "event-times"
    },
    "event: emit": {
        "body": "${1:Event}.emit(${2:event}, ${3:data})",
        "description": "Adonis Event: Emit an event with optional data.",
        "prefix": "event-emit"
    },
    "event: remove listener": {
        "body": "${1:Event}.removeListener(${2:event}, ${3:listener})",
        "description": "Adonis Event: Remove listener(s) for a given event.",
        "prefix": "event-remove-listener"
    },
    "event: off": {
        "body": "${1:Event}.off(${2:event}, ${3:listener})",
        "description": "Adonis Event: Remove all listeners for a given event.",
        "prefix": "event-off"
    },
    "event: remove all listeners": {
        "body": "${1:Event}.removeAlllisteners(${2:event})",
        "description": "Adonis Event: Remove all listeners for a given event.",
        "prefix": "event-remove-all-listeners"
    },
    "event: count listeners": {
        "body": "${1:Event}.listenersCount(${2:event})",
        "description": "Adonis Event: Get the number of listeners for a given event.",
        "prefix": "event-listeners-count"
    },
    "event: get listeners": {
        "body": "${1:Event}.getListeners(${2:event})",
        "description": "Adonis Event: Get an array of listeners for a given event.",
        "prefix": "event-get-listeners"
    },
    "event: check if isteners exist for event": {
        "body": "${1:Event}.hasListeners(${2:event})",
        "description": "Adonis Event: Get a boolean indicating whether there are any listeners for a given event.",
        "prefix": "event-has-listeners"
    }
}